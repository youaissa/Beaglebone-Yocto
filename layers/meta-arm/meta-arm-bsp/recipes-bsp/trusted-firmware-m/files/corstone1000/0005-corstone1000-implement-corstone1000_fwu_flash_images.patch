Upstream-Status: Pending [Not submitted to upstream yet]
Signed-off-by: Satish Kumar <satish.kumar01@arm.com>

From 593087034655eca09ff8e80e67c3252399fa0ce7 Mon Sep 17 00:00:00 2001
From: Satish Kumar <satish.kumar01@arm.com>
Date: Sat, 2 Oct 2021 18:51:21 +0100
Subject: [PATCH 05/15] corstone1000: implement corstone1000_fwu_flash_images

The API, corstone1000_fwu_flash_images, is an non-secure host
inteface (firmware update client) to send new updatable images,
and to start the update process. The implementation of the API does
version verfification before coping the images to the update bank.
After copy, the platform is reset.

On successful call to the API, the firmware update state of the
system changes from regular state to trial state. On reset,
the system is expected but not guaranteed to boot from the
update/trial bank.

Change-Id: I6c278145ec95ec522f7e59d00e1640a039c9778e
Signed-off-by: Satish Kumar <satish.kumar01@arm.com>
---
 .../corstone1000/CMSIS_Driver/Driver_Flash.c  |  11 +
 .../corstone1000/Native_Driver/flash_common.h |   1 +
 .../corstone1000/fw_update_agent/fwu_agent.c  | 225 ++++++++++++++++++
 .../corstone1000/fw_update_agent/fwu_agent.h  |  11 +
 .../include/corstone1000_ioctl_requests.h     |  32 +++
 .../services/src/tfm_platform_system.c        |  24 +-
 6 files changed, 300 insertions(+), 4 deletions(-)
 create mode 100644 platform/ext/target/arm/corstone1000/services/include/corstone1000_ioctl_requests.h

diff --git a/platform/ext/target/arm/corstone1000/CMSIS_Driver/Driver_Flash.c b/platform/ext/target/arm/corstone1000/CMSIS_Driver/Driver_Flash.c
index 10952d4cbe..01c535e094 100644
--- a/platform/ext/target/arm/corstone1000/CMSIS_Driver/Driver_Flash.c
+++ b/platform/ext/target/arm/corstone1000/CMSIS_Driver/Driver_Flash.c
@@ -175,6 +175,11 @@ int32_t Select_XIP_Mode_For_Shared_Flash(void)
     return ARM_DRIVER_OK;
 }
 
+int32_t Select_Write_Mode_For_Shared_Flash(void)
+{
+    return ARM_DRIVER_OK;
+}
+
 static int32_t STRATAFLASHJ3_Initialize(ARM_Flash_SignalEvent_t cb_event)
 {
     ARG_UNUSED(cb_event);
@@ -392,6 +397,12 @@ int32_t Select_XIP_Mode_For_Shared_Flash(void)
     return ARM_DRIVER_OK;
 }
 
+int32_t Select_Write_Mode_For_Shared_Flash(void)
+{
+    select_qspi_mode(&AXI_QSPI_DEV_S);
+    return ARM_DRIVER_OK;
+}
+
 static ARM_FLASH_CAPABILITIES N25Q256A_Driver_GetCapabilities(void)
 {
     return N25Q256ADriverCapabilities;
diff --git a/platform/ext/target/arm/corstone1000/Native_Driver/flash_common.h b/platform/ext/target/arm/corstone1000/Native_Driver/flash_common.h
index 76d5303f83..2e91fb2db4 100644
--- a/platform/ext/target/arm/corstone1000/Native_Driver/flash_common.h
+++ b/platform/ext/target/arm/corstone1000/Native_Driver/flash_common.h
@@ -18,6 +18,7 @@ extern "C"
 #include "Driver_Common.h"
 
 int32_t Select_XIP_Mode_For_Shared_Flash(void);
+int32_t Select_Write_Mode_For_Shared_Flash(void);
 
 #ifdef  __cplusplus
 }
diff --git a/platform/ext/target/arm/corstone1000/fw_update_agent/fwu_agent.c b/platform/ext/target/arm/corstone1000/fw_update_agent/fwu_agent.c
index b9c507e4ef..7fa64db0f7 100644
--- a/platform/ext/target/arm/corstone1000/fw_update_agent/fwu_agent.c
+++ b/platform/ext/target/arm/corstone1000/fw_update_agent/fwu_agent.c
@@ -11,6 +11,10 @@
 #include "Driver_Flash.h"
 #include "flash_layout.h"
 #include "fip_parser/external/uuid.h"
+#include "region_defs.h"
+#include "uefi_capsule_parser.h"
+#include "flash_common.h"
+#include "platform_base_address.h"
 
 /* Properties of image in a bank */
 struct fwu_image_properties {
@@ -73,9 +77,27 @@ struct fwu_private_metadata {
 
 } __packed;
 
+
 struct fwu_metadata _metadata;
+
 int is_initialized = 0;
 
+capsule_image_info_t capsule_info;
+
+enum fwu_agent_state_t {
+    FWU_AGENT_STATE_UNKNOWN = -1,
+    FWU_AGENT_STATE_REGULAR = 0,
+    FWU_AGENT_STATE_TRIAL,
+};
+
+struct efi_guid full_capsule_image_guid = {
+    .time_low = 0x3a770ddc,
+    .time_mid = 0x409b,
+    .time_hi_and_version = 0x48b2,
+    .clock_seq_and_node = {0x81, 0x41, 0x93, 0xb7, 0xc6, 0x0b, 0x20, 0x9e}
+};
+
+
 #define IMAGE_ACCEPTED          (1)
 #define IMAGE_NOT_ACCEPTED      (0)
 #define BANK_0                  (0)
@@ -84,8 +106,12 @@ int is_initialized = 0;
 #define IMAGE_1                 (1)
 #define IMAGE_2                 (2)
 #define IMAGE_3                 (3)
+#define IMAGE_END               (IMAGE_3)
+#define IMAGE_ALL               (IMAGE_END + 1)
+#define IMAGE_NOT_RECOGNIZED    (-1)
 #define INVALID_VERSION         (0xffffffff)
 
+
 #ifndef FWU_METADATA_FLASH_DEV
     #ifndef FLASH_DEV_NAME
     #error "FWU_METADATA_FLASH_DEV or FLASH_DEV_NAME must be defined in flash_layout.h"
@@ -307,3 +333,202 @@ enum fwu_agent_error_t fwu_metadata_provision(void)
     return FWU_AGENT_SUCCESS;
 }
 
+static enum fwu_agent_state_t get_fwu_agent_state(
+        struct fwu_metadata *metadata_ptr,
+        struct fwu_private_metadata *priv_metadata_ptr)
+{
+    uint32_t boot_index;
+
+    FWU_LOG_MSG("%s: enter\n\r", __func__);
+
+    boot_index = priv_metadata_ptr->boot_index;
+
+    if (boot_index != metadata_ptr->active_index) {
+        return FWU_AGENT_STATE_TRIAL;
+    }
+
+    for (int i = 0; i < NR_OF_IMAGES_IN_FW_BANK; i++) {
+        if ((metadata_ptr->img_entry[i].img_props[boot_index].accepted)
+                == (IMAGE_NOT_ACCEPTED)) {
+            return FWU_AGENT_STATE_TRIAL;
+        }
+    }
+
+    FWU_LOG_MSG("%s: exit: FWU_AGENT_STATE_REGULAR\n\r", __func__);
+    return FWU_AGENT_STATE_REGULAR;
+}
+
+static int get_image_info_in_bank(struct efi_guid* guid, uint32_t* image_bank_offset)
+{
+    if ((memcmp(guid, &full_capsule_image_guid, sizeof(struct efi_guid))) == 0) {
+        *image_bank_offset = 0;
+        return IMAGE_ALL;
+    }
+
+    return IMAGE_NOT_RECOGNIZED;
+}
+
+static enum fwu_agent_error_t erase_bank(uint32_t bank_offset)
+{
+    int ret;
+    uint32_t sectors;
+
+    FWU_LOG_MSG("%s: enter\n\r", __func__);
+
+    if ((bank_offset % FWU_METADATA_FLASH_SECTOR_SIZE) != 0) {
+        return FWU_AGENT_ERROR;
+    }
+
+    if ((BANK_PARTITION_SIZE % FWU_METADATA_FLASH_SECTOR_SIZE) != 0) {
+        return FWU_AGENT_ERROR;
+    }
+
+    sectors = BANK_PARTITION_SIZE / FWU_METADATA_FLASH_SECTOR_SIZE;
+
+    FWU_LOG_MSG("%s: erasing sectors = %u, from offset = %u\n\r", __func__,
+                     sectors, bank_offset);
+
+    for (int i = 0; i < sectors; i++) {
+        ret = FWU_METADATA_FLASH_DEV.EraseSector(
+                bank_offset + (i * FWU_METADATA_FLASH_SECTOR_SIZE));
+        if (ret != ARM_DRIVER_OK) {
+            return FWU_AGENT_ERROR;
+        }
+    }
+
+    FWU_LOG_MSG("%s: exit\n\r", __func__);
+    return FWU_AGENT_SUCCESS;
+}
+
+
+static enum fwu_agent_error_t flash_full_capsule(
+        struct fwu_metadata* metadata, void* images, uint32_t size,
+        uint32_t version)
+{
+    int ret;
+    uint32_t active_index = metadata->active_index;
+    uint32_t bank_offset;
+    uint32_t previous_active_index;
+
+    FWU_LOG_MSG("%s: enter: image = 0x%p, size = %u, version = %u\n\r"
+                , __func__, images, size, version);
+
+    if (!metadata || !images) {
+        return FWU_AGENT_ERROR;
+    }
+
+    if (size > BANK_PARTITION_SIZE) {
+        return FWU_AGENT_ERROR;
+    }
+
+    if (version <=
+            (metadata->img_entry[IMAGE_0].img_props[active_index].version)) {
+        return FWU_AGENT_ERROR;
+    }
+
+    if (active_index == BANK_0) {
+        previous_active_index = BANK_1;
+        bank_offset = BANK_1_PARTITION_OFFSET;
+    } else if (active_index == BANK_1) {
+        previous_active_index = BANK_0;
+        bank_offset = BANK_0_PARTITION_OFFSET;
+    } else {
+        return FWU_AGENT_ERROR;
+    }
+
+    if (erase_bank(bank_offset)) {
+        return FWU_AGENT_ERROR;
+    }
+
+    FWU_LOG_MSG("%s: writing capsule to the flash at offset = %u...\n\r",
+                      __func__, bank_offset);
+    ret = FWU_METADATA_FLASH_DEV.ProgramData(bank_offset, images, size);
+    if (ret != ARM_DRIVER_OK) {
+        return FWU_AGENT_ERROR;
+    }
+    FWU_LOG_MSG("%s: images are written to bank offset = %u\n\r", __func__,
+                     bank_offset);
+
+    /* Change system state to trial bank state */
+    for (int i = 0; i < NR_OF_IMAGES_IN_FW_BANK; i++) {
+        metadata->img_entry[i].img_props[previous_active_index].accepted =
+                                                        IMAGE_NOT_ACCEPTED;
+        metadata->img_entry[i].img_props[previous_active_index].version = version;
+    }
+    metadata->active_index = previous_active_index;
+    metadata->previous_active_index = active_index;
+
+    ret = metadata_write(metadata);
+    if (ret) {
+        return ret;
+    }
+
+    FWU_LOG_MSG("%s: exit\n\r", __func__);
+    return FWU_AGENT_SUCCESS;
+}
+
+enum fwu_agent_error_t corstone1000_fwu_flash_image(void)
+{
+    enum fwu_agent_error_t ret;
+    struct fwu_private_metadata priv_metadata;
+    enum fwu_agent_state_t current_state;
+    void *capsule_ptr = (char*)CORSTONE1000_HOST_DRAM_UEFI_CAPSULE;
+    int image_index;
+    uint32_t image_bank_offset;
+    uint32_t nr_images;
+
+    FWU_LOG_MSG("%s: enter\n\r", __func__);
+
+    if (!is_initialized) {
+        return FWU_AGENT_ERROR;
+    }
+
+    Select_Write_Mode_For_Shared_Flash();
+
+    if (metadata_read(&_metadata)) {
+        ret =  FWU_AGENT_ERROR;
+        goto out;
+    }
+
+    if (private_metadata_read(&priv_metadata)) {
+        ret =  FWU_AGENT_ERROR;
+        goto out;
+    }
+
+    /* Firmware update process can only start in regular state. */
+    current_state = get_fwu_agent_state(&_metadata, &priv_metadata);
+    if (current_state != FWU_AGENT_STATE_REGULAR) {
+        ret =  FWU_AGENT_ERROR;
+        goto out;
+    }
+
+    memset(&capsule_info, 0, sizeof(capsule_image_info_t));
+    if (uefi_capsule_retrieve_images(capsule_ptr, &capsule_info)) {
+        ret =  FWU_AGENT_ERROR;
+        goto out;
+    }
+    nr_images = capsule_info.nr_image;
+
+    for (int i = 0; i < nr_images; i++) {
+        image_index = get_image_info_in_bank(&capsule_info.guid[i],
+                                &image_bank_offset);
+        switch(image_index) {
+            case IMAGE_ALL:
+                ret = flash_full_capsule(&_metadata, capsule_info.image[i],
+                                         capsule_info.size[i],
+                                         capsule_info.version[i]);
+                break;
+            default:
+                FWU_LOG_MSG("%s: sent image not recognized\n\r", __func__);
+                ret = FWU_AGENT_ERROR;
+                break;
+        }
+    }
+
+out:
+    Select_XIP_Mode_For_Shared_Flash();
+
+    FWU_LOG_MSG("%s: exit: ret = %d\n\r", __func__, ret);
+    return ret;
+}
+
diff --git a/platform/ext/target/arm/corstone1000/fw_update_agent/fwu_agent.h b/platform/ext/target/arm/corstone1000/fw_update_agent/fwu_agent.h
index 449d354100..f5ab877ef1 100644
--- a/platform/ext/target/arm/corstone1000/fw_update_agent/fwu_agent.h
+++ b/platform/ext/target/arm/corstone1000/fw_update_agent/fwu_agent.h
@@ -23,9 +23,20 @@ enum fwu_agent_error_t {
         FWU_AGENT_ERROR = (-1)
 };
 
+#define FWU_ASSERT(_c_)                                                        \
+                if (!(_c_)) {                                                  \
+                    FWU_LOG_MSG("%s:%d assert hit\n\r", __func__, __LINE__);   \
+                    while(1) {};                                               \
+                }                                                              \
+
+
 enum fwu_agent_error_t fwu_metadata_provision(void);
 enum fwu_agent_error_t fwu_metadata_init(void);
 
+/* host to secure enclave:
+ * firwmare update image is sent accross
+ */
+enum fwu_agent_error_t corstone1000_fwu_flash_image(void);
 
 #endif /* FWU_AGENT_H */
 
diff --git a/platform/ext/target/arm/corstone1000/services/include/corstone1000_ioctl_requests.h b/platform/ext/target/arm/corstone1000/services/include/corstone1000_ioctl_requests.h
new file mode 100644
index 0000000000..8ac67346b6
--- /dev/null
+++ b/platform/ext/target/arm/corstone1000/services/include/corstone1000_ioctl_requests.h
@@ -0,0 +1,32 @@
+/*
+ * Copyright (c) 2021, Arm Limited. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ */
+
+#ifndef CORSTONE1000_IOCTL_REQUESTS_H
+#define CORSTONE1000_IOCTL_REQUESTS_H
+
+#include<stdint.h>
+
+
+enum corstone1000_ioctl_id_t {
+   IOCTL_CORSTONE1000_FWU_FLASH_IMAGES = 0,
+   IOCTL_CORSTONE1000_FWU_HOST_ACK,
+};
+
+
+typedef struct corstone1000_ioctl_in_params {
+
+    uint32_t ioctl_id;
+
+} corstone1000_ioctl_in_params_t;
+
+typedef struct corstone1000_ioctl_out_params {
+
+    int32_t result;
+
+} corstone1000_ioctl_out_params_t;
+
+#endif /* CORSTONE1000_IOCTL_REQUESTS_H */
diff --git a/platform/ext/target/arm/corstone1000/services/src/tfm_platform_system.c b/platform/ext/target/arm/corstone1000/services/src/tfm_platform_system.c
index ed31c8895a..f9629a1688 100644
--- a/platform/ext/target/arm/corstone1000/services/src/tfm_platform_system.c
+++ b/platform/ext/target/arm/corstone1000/services/src/tfm_platform_system.c
@@ -7,6 +7,8 @@
 
 #include "tfm_platform_system.h"
 #include "platform_description.h"
+#include "corstone1000_ioctl_requests.h"
+#include "fwu_agent.h"
 
 void tfm_platform_hal_system_reset(void)
 {
@@ -18,8 +20,22 @@ enum tfm_platform_err_t tfm_platform_hal_ioctl(tfm_platform_ioctl_req_t request,
                                                psa_invec  *in_vec,
                                                psa_outvec *out_vec)
 {
-    (void)in_vec;
-    (void)out_vec;
-    /* No IOCTL is ipmlemented */
-    return TFM_PLATFORM_ERR_NOT_SUPPORTED;
+    int32_t ret = TFM_PLATFORM_ERR_SUCCESS;
+    const corstone1000_ioctl_in_params_t *in_params =
+                                    (corstone1000_ioctl_in_params_t *)in_vec->base;
+    corstone1000_ioctl_out_params_t *out_params = (corstone1000_ioctl_out_params_t *)out_vec->base;
+
+    switch(in_params->ioctl_id) {
+        case IOCTL_CORSTONE1000_FWU_FLASH_IMAGES:
+            out_params->result = corstone1000_fwu_flash_image();
+            if (!out_params->result) {
+                NVIC_SystemReset();
+            }
+            break;
+        default:
+            ret = TFM_PLATFORM_ERR_NOT_SUPPORTED;
+            break;
+    }
+
+    return ret;
 }
-- 
2.17.1

