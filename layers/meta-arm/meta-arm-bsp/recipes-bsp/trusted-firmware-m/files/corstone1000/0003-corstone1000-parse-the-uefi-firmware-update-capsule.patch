Upstream-Status: Pending [Not submitted to upstream yet]
Signed-off-by: Satish Kumar <satish.kumar01@arm.com>

From 22aeb7708773c2cc9df2cc501d411b94c09fd0bd Mon Sep 17 00:00:00 2001
From: Satish Kumar <satish.kumar01@arm.com>
Date: Sat, 2 Oct 2021 12:31:07 +0100
Subject: [PATCH 03/15] corstone1000: parse the uefi firmware update capsule

The Host (OTA Client) sends a capsule containing fwu images
to secure enclave. The commit parses the capsule to retrieve
images.

Change-Id: Icf097cf88911a568bdc9eba8c98e2da93994f0bc
Signed-off-by: Satish Kumar <satish.kumar01@arm.com>
---
 .../target/arm/corstone1000/CMakeLists.txt    |   2 +
 .../fw_update_agent/uefi_capsule_parser.c     | 155 ++++++++++++++++++
 .../fw_update_agent/uefi_capsule_parser.h     |  31 ++++
 3 files changed, 188 insertions(+)
 create mode 100644 platform/ext/target/arm/corstone1000/fw_update_agent/uefi_capsule_parser.c
 create mode 100644 platform/ext/target/arm/corstone1000/fw_update_agent/uefi_capsule_parser.h

diff --git a/platform/ext/target/arm/corstone1000/CMakeLists.txt b/platform/ext/target/arm/corstone1000/CMakeLists.txt
index 16d256bc34..f34035d361 100644
--- a/platform/ext/target/arm/corstone1000/CMakeLists.txt
+++ b/platform/ext/target/arm/corstone1000/CMakeLists.txt
@@ -51,6 +51,7 @@ target_include_directories(platform_s
         services/include
     INTERFACE
         cc312
+        fw_update_agent
 )
 
 target_sources(platform_s
@@ -67,6 +68,7 @@ target_sources(platform_s
         tfm_hal_platform.c
         ${CMAKE_SOURCE_DIR}/platform/ext/common/tfm_hal_nvic.c
         $<$<BOOL:TFM_PARTITION_PLATFORM>:${CMAKE_CURRENT_SOURCE_DIR}/services/src/tfm_platform_system.c>
+        fw_update_agent/uefi_capsule_parser.c
 )
 
 if (PLATFORM_IS_FVP)
diff --git a/platform/ext/target/arm/corstone1000/fw_update_agent/uefi_capsule_parser.c b/platform/ext/target/arm/corstone1000/fw_update_agent/uefi_capsule_parser.c
new file mode 100644
index 0000000000..32133b2eb2
--- /dev/null
+++ b/platform/ext/target/arm/corstone1000/fw_update_agent/uefi_capsule_parser.c
@@ -0,0 +1,155 @@
+/*
+ * Copyright (c) 2021, Arm Limited. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ */
+
+#include "uefi_capsule_parser.h"
+#include "fwu_agent.h"
+#include <string.h>
+
+/*
+Update Capsule Structure (UEFI spec 2.9 1004)
+    EFI_CAPSULE_HEADER
+    ...
+    ...
+    ...
+    CAPSULE_BODY
+        efi_firmware_management_capsule_header
+        Optional Driver 1 (item_offset[0])
+        Optional Driver 2 (item_offset[1])
+            Payload 1 (item_offset[2])
+                efi_firmware_management_capsule_iamge_header
+                Binary Update image (Image_length == update_image_size)
+                Vendor Code bytes  (Data lenght == update_vendorcode_size)
+            Payload 2 (item_offset[3])
+            ...
+            ...
+            Payload n (item_offset[embedded_driver_count + payload_item_count -1])
+*/
+
+typedef struct {
+    struct efi_guid         capsule_guid;
+    uint32_t                header_size;
+    uint32_t                flags;
+    uint32_t                capsule_image_size;
+} efi_capsule_header_t;
+
+typedef struct {
+    uint32_t                version;
+    uint16_t                embedded_driver_count;
+    uint16_t                payload_item_count;
+    uint64_t                item_offset_list[];
+} efi_firmware_management_capsule_header_t;
+
+typedef struct {
+    uint32_t                version;
+    struct efi_guid         update_image_type_id;
+    uint8_t                 update_image_index;
+    uint8_t                 reserved_bytes[3];
+    uint32_t                update_image_size;
+    uint32_t                update_vendorcode_size;
+    uint64_t                update_hardware_instance; //introduced in v2
+    uint64_t                image_capsule_support; //introduced in v3
+} efi_firmware_management_capsule_image_header_t;
+
+#define ANYSIZE_ARRAY 0
+
+typedef struct {
+    uint32_t                dwLength;
+    uint16_t                wRevision;
+    uint16_t                wCertificateType;
+    uint8_t                 bCertificate[ANYSIZE_ARRAY];
+} WIN_CERTIFICATE;
+
+typedef struct {
+    WIN_CERTIFICATE         hdr;
+    struct efi_guid         cert_type;
+    uint8_t                 cert_data[ANYSIZE_ARRAY];
+} win_certificate_uefi_guid_t;
+
+typedef struct {
+    uint64_t                    monotonic_count;
+    win_certificate_uefi_guid_t   auth_info;
+} efi_firmware_image_authentication_t;
+
+
+enum uefi_capsule_error_t uefi_capsule_retrieve_images(void* capsule_ptr,
+        capsule_image_info_t* images_info)
+{
+    char *ptr = (char*)capsule_ptr;
+    efi_capsule_header_t* capsule_header;
+    efi_firmware_management_capsule_header_t* payload_header;
+    efi_firmware_management_capsule_image_header_t* image_header;
+    efi_firmware_image_authentication_t* image_auth;
+    uint32_t total_size;
+    uint32_t image_count;
+    uint32_t auth_size;
+
+    FWU_LOG_MSG("%s: enter, capsule ptr = 0x%p\n\r", __func__, capsule_ptr);
+
+    if (!capsule_ptr) {
+        return UEFI_CAPSULE_PARSER_ERROR;
+    }
+
+    capsule_header = (efi_capsule_header_t*)ptr;
+    ptr += sizeof(efi_capsule_header_t) + sizeof(uint32_t);
+    payload_header = (efi_firmware_management_capsule_header_t*)ptr;
+
+    total_size = capsule_header->capsule_image_size;
+    image_count = payload_header->payload_item_count;
+    images_info->nr_image = image_count;
+
+    FWU_LOG_MSG("%s: capsule size = %u, image count = %u\n\r", __func__,
+                        total_size, image_count);
+
+    if ((image_count == 0) || (image_count > NR_OF_IMAGES_IN_FW_BANK)) {
+        return UEFI_CAPSULE_PARSER_ERROR;
+    }
+
+    for (int i = 0; i < image_count; i++) {
+
+        image_header = (efi_firmware_management_capsule_image_header_t*)(ptr +
+                                payload_header->item_offset_list[i]);
+
+        images_info->size[i] = image_header->update_image_size;
+        images_info->version[i] = image_header->version;
+        FWU_LOG_MSG("%s: image %i version = %u\n\r", __func__, i,
+                                images_info->version[i]);
+
+        image_auth = (efi_firmware_image_authentication_t*)(
+                        (char*)image_header +
+                        sizeof (efi_firmware_management_capsule_image_header_t)
+                     );
+        auth_size = sizeof(uint64_t) /* monotonic_count */  +
+                    image_auth->auth_info.hdr.dwLength /* WIN_CERTIFICATE + cert_data */ +
+                    sizeof(struct efi_guid) /* cert_type */;
+
+        FWU_LOG_MSG("%s: auth size = %u\n\r", __func__, auth_size);
+
+        images_info->size[i] -= auth_size;
+
+        images_info->image[i] = (
+                (char*)image_header +
+                sizeof(efi_firmware_management_capsule_image_header_t) +
+                auth_size);
+
+        memcpy(&images_info->guid[i], &(image_header->update_image_type_id),
+                                                        sizeof(struct efi_guid));
+
+        FWU_LOG_MSG("%s: image %d at %p, size=%u\n\r", __func__, i,
+                        images_info->image[i], images_info->size[i]);
+
+        if ((payload_header->item_offset_list[i] +
+             sizeof(efi_firmware_management_capsule_image_header_t) +
+             image_header->update_image_size) > total_size)
+        {
+            return UEFI_CAPSULE_PARSER_ERROR;
+        }
+
+    }
+
+    FWU_LOG_MSG("%s: exit\n\r", __func__);
+    return UEFI_CAPSULE_PARSER_SUCCESS;
+}
diff --git a/platform/ext/target/arm/corstone1000/fw_update_agent/uefi_capsule_parser.h b/platform/ext/target/arm/corstone1000/fw_update_agent/uefi_capsule_parser.h
new file mode 100644
index 0000000000..a890a709e9
--- /dev/null
+++ b/platform/ext/target/arm/corstone1000/fw_update_agent/uefi_capsule_parser.h
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) 2021, Arm Limited. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ */
+
+#ifndef UEFI_CAPSULE_PARSER_H
+#define UEFI_CAPSULE_PARSER_H
+
+#include <stdint.h>
+#include "fip_parser/external/uuid.h"
+#include "flash_layout.h"
+
+enum uefi_capsule_error_t {
+    UEFI_CAPSULE_PARSER_SUCCESS = 0,
+    UEFI_CAPSULE_PARSER_ERROR = (-1)
+};
+
+typedef struct capsule_image_info {
+    uint32_t nr_image;
+    void *image[NR_OF_IMAGES_IN_FW_BANK];
+    struct efi_guid guid[NR_OF_IMAGES_IN_FW_BANK];
+    uint32_t size[NR_OF_IMAGES_IN_FW_BANK];
+    uint32_t version[NR_OF_IMAGES_IN_FW_BANK];
+} capsule_image_info_t;
+
+enum uefi_capsule_error_t uefi_capsule_retrieve_images(void* capsule_ptr,
+        capsule_image_info_t* images_info);
+
+#endif /* UEFI_CAPSULE_PARSER_H */
-- 
2.17.1

